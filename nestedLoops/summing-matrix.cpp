#include "loops-procedures.h"
//#include <fstream>

void RegionsSumming()
{
	cout << "\n *Побудова матриці з сум прямокутних частин іншої матриці*\n\n";
	// Для спрощення початкову матрицю задамо в коді програми
	const unsigned n = 7;
	int a[n][n] = {{ 1, 2, 0,-1,-2, 1,}, {-1, 0, 1, 2, 3,-2,}, { 0, 1,-1, 1, 0, 2, 3},
	{ 2, 3,-2,-1, 1, 0, 2}, { 1, 0, 1,-1, 0,-1, 1}, { 2,-1, 1, 1, 1,-1,-2}, {-3, 1,-2, 1,-1, 1, 2}};
	// Ініціалізацію можна легко замінити введенням з файла
	/*std::ifstream f("matrix.txt");
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j) f >> a[i][j];
	f.close();*/
	// виділення пам'яті для динамічної матриці
	int** b = CreateMatrix(n);
	for (unsigned i = 0; i < n; ++i)
	{							// перебираємо елементи матриці B
		for (unsigned j = 0; j < n; ++j)
		{
			int s = 0;          // сумуємо елементи відповідної області
			for (unsigned k = 0; k <= i; ++k)
				for (unsigned l = j; l < n; ++l) s += a[k][l];
			b[i][j] = s;
		}
	}
	// виведення результатів
	PrintMatrix(b, n);
	EraseMatrix(b);
	return;
}

void EconomicSumming()
{
	cout << "\n *Економна побудова матриці з сум прямокутних частин іншої матриці*\n\n";
	// Для спрощення початкову матрицю задамо в коді програми
	const unsigned n = 7;
	int a[n][n] = {{ 1, 2, 0,-1,-2, 1,}, {-1, 0, 1, 2, 3,-2,}, { 0, 1,-1, 1, 0, 2, 3},
	{ 2, 3,-2,-1, 1, 0, 2}, { 1, 0, 1,-1, 0,-1, 1}, { 2,-1, 1, 1, 1,-1,-2}, {-3, 1,-2, 1,-1, 1, 2}};
	// виділення пам'яті для динамічної матриці
	int** b = CreateMatrix(n);
	// формуємо останній стовпець
	unsigned n_1 = n - 1;
	b[0][n_1] = a[0][n_1];
	for (unsigned i = 1; i < n; ++i)
		b[i][n_1] = b[i - 1][n_1] + a[i][n_1];
	// рекурентно обчислюємо решту стовпців
	for (int j = n_1 - 1; j >= 0; --j)
	{
		int s = 0;   // сума & нові елементи одночасно
		for (unsigned i = 0; i < n; ++i)
		{
			s += a[i][j];
			b[i][j] = b[i][j + 1] + s;
		}
	}
	// виведення результатів
	PrintMatrix(b, n);
	EraseMatrix(b);
	return;
}
